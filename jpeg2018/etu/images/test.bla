ppm_check_header:
	 presence de P5 ou P6 dans l'entete... PASS
	 presence des dimensions HxV dans l'entete... 8x8
	 presence de 255 dans l'entete... PASS

ppm2blabla v4 (22/05/18)
[MCU #0] Valeurs RGB initiales:
ff00f6 ff00f6 ff00f6 ff00f6 ff00f6 ff00f6 ff00f6 ff00f6    
ff00f6 0000ff 0000ff 0000ff 0000ff 0000ff 0000ff ff00f6    
ff00f6 ff00f6 ff00f6 ff00f6 ff00f6 ff00f6 0000ff ff00f6    
ff0000 ff0000 ff0000 ff0000 ff0000 ff0000 ffff00 ff0000    
00ff00 00ff00 00ff00 00ff00 00ff00 00ff00 ffff00 00ff00    
00ffea 00ffea 00ffea 00ffea 00ffea 00ffea 0000ff 00ffea    
00ffea 0000ff 0000ff 0000ff 0000ff 0000ff 0000ff 00ffea    
00ffea 00ffea 00ffea 00ffea 00ffea 00ffea 00ffea 00ff0a    

[MCU #0] Conversion RGB -> YCbCr:
[Y]:
	68 68 68 68 68 68 68 68 
	68 1d 1d 1d 1d 1d 1d 68 
	68 68 68 68 68 68 1d 68 
	4c 4c 4c 4c 4c 4c e2 4c 
	96 96 96 96 96 96 e2 96 
	b0 b0 b0 b0 b0 b0 1d b0 
	b0 1d 1d 1d 1d 1d 1d b0 
	b0 b0 b0 b0 b0 b0 b0 97 

[Cb]:
	d0 d0 d0 d0 d0 d0 d0 d0 
	d0 ff ff ff ff ff ff d0 
	d0 d0 d0 d0 d0 d0 ff d0 
	55 55 55 55 55 55 00 55 
	2c 2c 2c 2c 2c 2c 00 2c 
	a1 a1 a1 a1 a1 a1 ff a1 
	a1 ff ff ff ff ff ff a1 
	a1 a1 a1 a1 a1 a1 a1 31 

[Cr]:
	ec ec ec ec ec ec ec ec 
	ec 6b 6b 6b 6b 6b 6b ec 
	ec ec ec ec ec ec 6b ec 
	ff ff ff ff ff ff 95 ff 
	15 15 15 15 15 15 95 15 
	02 02 02 02 02 02 6b 02 
	02 6b 6b 6b 6b 6b 6b 02 
	02 02 02 02 02 02 02 14 

[MCU #0] Downsampling:
[Y]:
	68 68 68 68 68 68 68 68 
	68 1d 1d 1d 1d 1d 1d 68 
	68 68 68 68 68 68 1d 68 
	4c 4c 4c 4c 4c 4c e2 4c 
	96 96 96 96 96 96 e2 96 
	b0 b0 b0 b0 b0 b0 1d b0 
	b0 1d 1d 1d 1d 1d 1d b0 
	b0 b0 b0 b0 b0 b0 b0 97 

[Cb]:
	d0 d0 d0 d0 d0 d0 d0 d0 
	d0 ff ff ff ff ff ff d0 
	d0 d0 d0 d0 d0 d0 ff d0 
	55 55 55 55 55 55 00 55 
	2c 2c 2c 2c 2c 2c 00 2c 
	a1 a1 a1 a1 a1 a1 ff a1 
	a1 ff ff ff ff ff ff a1 
	a1 a1 a1 a1 a1 a1 a1 31 

[Cr]:
	ec ec ec ec ec ec ec ec 
	ec 6b 6b 6b 6b 6b 6b ec 
	ec ec ec ec ec ec 6b ec 
	ff ff ff ff ff ff 95 ff 
	15 15 15 15 15 15 95 15 
	02 02 02 02 02 02 6b 02 
	02 6b 6b 6b 6b 6b 6b 02 
	02 02 02 02 02 02 02 14 

[MCU #0] DCT:
[Y]:
	ff80 0003 0044 0003 0033 0003 001b 0001 
	ff48 ffee ffef fffd ffe5 000a ffea 0006 
	ffd2 001f 0016 fffe 002f ffe4 002a ffef 
	003e 0012 0000 fff6 001c ffe1 001e ffef 
	00a5 ffc2 ffd1 0013 ff8d 0050 ff97 002c 
	ff85 ffec 002b 0000 000e 0010 fffd 0009 
	00c1 003f ff83 fff3 ffe9 ffb9 001b ffd8 
	000a 0001 0012 fffe 0011 fffc 000b fffe 

[Cb]:
	0131 0011 ffc0 0010 ffcd 000d ffe3 0005 
	008c ffec 0028 ffe7 0027 ffe8 0019 fff5 
	016c 000b ffd5 0018 ffcf 001e ffdc 000e 
	ffef ffda 0017 fff0 0001 0004 fff7 0005 
	fe76 003b 0009 0007 0037 ffdc 0037 ffe9 
	0055 fff9 fff5 fff1 0002 ffec 0007 fff7 
	000f ffe5 0043 0011 0006 0032 ffeb 001b 
	0006 fffa fff9 fffb fffa fffd fffc ffff 

[Cr]:
	ffce fffd 000a fffd 0008 fffd 0004 ffff 
	025f 0028 0045 fffb 0060 ffd7 004c ffe8 
	ffc5 fffe 0007 fffc 0008 fffb 0005 fffd 
	ff43 ffb9 0009 0014 ffad 005a ffa2 0032 
	0040 fff6 fffe ffff fff6 0006 fff6 0003 
	018e 0034 ff7c fff6 ffd7 ffc6 000a ffdf 
	fffe 0004 fff4 fffd fffe fff7 0003 fffb 
	ffe6 fff9 ffc6 0002 ffcb 0009 ffde 0005 

[MCU #0] ZZ:
[Y]:
	ff80 0003 ff48 ffd2 ffee 0044 0003 ffef 
	001f 003e 00a5 0012 0016 fffd 0033 0003 
	ffe5 fffe 0000 ffc2 ff85 00c1 ffec ffd1 
	fff6 002f 000a 001b 0001 ffea ffe4 001c 
	0013 002b 003f 000a 0001 ff83 0000 ff8d 
	ffe1 002a 0006 ffef 001e 0050 000e fff3 
	0012 fffe ffe9 0010 ff97 ffef 002c fffd 
	ffb9 0011 fffc 001b 0009 ffd8 000b fffe 

[Cb]:
	0131 0011 008c 016c ffec ffc0 0010 0028 
	000b ffef fe76 ffda ffd5 ffe7 ffcd 000d 
	0027 0018 0017 003b 0055 000f fff9 0009 
	fff0 ffcf ffe8 ffe3 0005 0019 001e 0001 
	0007 fff5 ffe5 0006 fffa 0043 fff1 0037 
	0004 ffdc fff5 000e fff7 ffdc 0002 0011 
	fff9 fffb 0006 ffec 0037 0005 ffe9 0007 
	0032 fffa fffd ffeb fff7 001b fffc ffff 

[Cr]:
	ffce fffd 025f ffc5 0028 000a fffd 0045 
	fffe ff43 0040 ffb9 0007 fffb 0008 fffd 
	0060 fffc 0009 fff6 018e fffe 0034 fffe 
	0014 0008 ffd7 0004 ffff 004c fffb ffad 
	ffff ff7c 0004 ffe6 fff9 fff4 fff6 fff6 
	005a 0005 ffe8 fffd ffa2 0006 ffd7 fffd 
	ffc6 0002 fffe ffc6 fff6 0032 0003 000a 
	fff7 ffcb 0009 0003 ffdf fffb ffde 0005 

[MCU #0] Quantification:
[Y]:
	ffe7 0001 ffc3 fff7 fffe 0005 0000 0000 
	0007 000f 0029 0003 0002 0000 0002 0000 
	fffa 0000 0000 fff8 fff6 000b 0000 fffe 
	fffe 0009 0001 0003 0000 0000 ffff 0001 
	0003 0006 0005 0000 0000 fffd 0000 fffb 
	fffc 0003 0000 0000 0001 0002 0000 0000 
	0001 0000 ffff 0000 fffd 0000 0001 0000 
	fffd 0000 0000 0000 0000 ffff 0000 0000 

[Cb]:
	003d 0003 0014 001a 0000 fffe 0000 0001 
	0002 fffe ffcf ffff ffff 0000 ffff 0000 
	0005 0003 0001 0001 0002 0000 0000 0000 
	ffff fffe 0000 0000 0000 0000 0001 0000 
	0000 0000 0000 0000 0000 0002 0000 0001 
	0000 ffff 0000 0000 0000 ffff 0000 0000 
	0000 0000 0000 0000 0001 0000 0000 0000 
	0001 0000 0000 0000 0000 0000 0000 0000 

[Cr]:
	fff6 0000 0056 fffc 0001 0000 0000 0002 
	0000 ffe1 0008 fffd 0000 0000 0000 0000 
	000d 0000 0000 0000 000d 0000 0001 0000 
	0001 0000 ffff 0000 0000 0002 0000 fffe 
	0000 fffc 0000 0000 0000 0000 0000 0000 
	0003 0000 0000 0000 fffd 0000 ffff 0000 
	ffff 0000 0000 ffff 0000 0001 0000 0000 
	0000 ffff 0000 0000 ffff 0000 ffff 0000 

[MCU #0] Compression AC/DC puis Ã©criture dans le flux.
[acdc] block 0
DC:
	value = -25, magnitude = 5, index = 6
		bitstream => writing 6 over 3 bits
		bitstream => writing 6 over 5 bits

AC:
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nbits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = -61, magnitude = 6, index = 2
	RLE code = 6, huffman path = 120, nbits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 2 over 6 bits
	value = -9, magnitude = 4, index = 6
	RLE code = 4, huffman path = 11, nbits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 6 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nbits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nbits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = 7, magnitude = 3, index = 7
	RLE code = 35, huffman path = 1015, nbits = 10
		bitstream => writing 1015 over 10 bits
		bitstream => writing 7 over 3 bits
	value = 15, magnitude = 4, index = 15
	RLE code = 4, huffman path = 11, nbits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 15 over 4 bits
	value = 41, magnitude = 6, index = 41
	RLE code = 6, huffman path = 120, nbits = 7
		bitstream => writing 120 over 7 bits
		bitstream => writing 41 over 6 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nbits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nbits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 18, huffman path = 27, nbits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 2 over 2 bits
	value = -6, magnitude = 3, index = 1
	RLE code = 19, huffman path = 121, nbits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 1 over 3 bits
	value = -8, magnitude = 4, index = 7
	RLE code = 36, huffman path = 4084, nbits = 12
		bitstream => writing 4084 over 12 bits
		bitstream => writing 7 over 4 bits
	value = -10, magnitude = 4, index = 5
	RLE code = 4, huffman path = 11, nbits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 5 over 4 bits
	value = 11, magnitude = 4, index = 11
	RLE code = 4, huffman path = 11, nbits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 11 over 4 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 27, nbits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 1, nbits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 2 bits
	value = 9, magnitude = 4, index = 9
	RLE code = 4, huffman path = 11, nbits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 9 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nbits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nbits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 33, huffman path = 28, nbits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 0, nbits = 2
		bitstream => writing 0 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nbits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 6, magnitude = 3, index = 6
	RLE code = 3, huffman path = 4, nbits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 6 over 3 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 3, huffman path = 4, nbits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 5 over 3 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 34, huffman path = 249, nbits = 8
		bitstream => writing 249 over 8 bits
		bitstream => writing 0 over 2 bits
	value = -5, magnitude = 3, index = 2
	RLE code = 19, huffman path = 121, nbits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 2 over 3 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 4, nbits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 1, nbits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 33, huffman path = 28, nbits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 1, nbits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 33, huffman path = 28, nbits = 5
		bitstream => writing 28 over 5 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 12, nbits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nbits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 12, nbits = 4
		bitstream => writing 12 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 18, huffman path = 27, nbits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 65, huffman path = 59, nbits = 6
		bitstream => writing 59 over 6 bits
		bitstream => writing 0 over 1 bits
	value = endofblock, huffman_path = 10, nbits = 4
		bitstream => writing 10 over 4 bits
[acdc] block 0
DC:
	value = 61, magnitude = 6, index = 61
		bitstream => writing 62 over 6 bits
		bitstream => writing 61 over 6 bits

AC:
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 4, nbits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 2 bits
	value = 20, magnitude = 5, index = 20
	RLE code = 5, huffman path = 25, nbits = 5
		bitstream => writing 25 over 5 bits
		bitstream => writing 20 over 5 bits
	value = 26, magnitude = 5, index = 26
	RLE code = 5, huffman path = 25, nbits = 5
		bitstream => writing 25 over 5 bits
		bitstream => writing 26 over 5 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 57, nbits = 6
		bitstream => writing 57 over 6 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 11, nbits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 4, nbits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 4, nbits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 2 bits
	value = -49, magnitude = 6, index = 14
	RLE code = 6, huffman path = 56, nbits = 6
		bitstream => writing 56 over 6 bits
		bitstream => writing 14 over 6 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 1, nbits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 1, huffman path = 1, nbits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 11, nbits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 5, magnitude = 3, index = 5
	RLE code = 19, huffman path = 246, nbits = 8
		bitstream => writing 246 over 8 bits
		bitstream => writing 5 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 2, huffman path = 4, nbits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 3 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 1, nbits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 1, nbits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 2, huffman path = 4, nbits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 2 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 49, huffman path = 27, nbits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 1 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 2, huffman path = 4, nbits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 1 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 65, huffman path = 58, nbits = 6
		bitstream => writing 58 over 6 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 98, huffman path = 2039, nbits = 11
		bitstream => writing 2039 over 11 bits
		bitstream => writing 2 over 2 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 11, nbits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 11, nbits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 49, huffman path = 27, nbits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 97, huffman path = 121, nbits = 7
		bitstream => writing 121 over 7 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 49, huffman path = 27, nbits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 1 over 1 bits
	value = endofblock, huffman_path = 0, nbits = 2
		bitstream => writing 0 over 2 bits
[acdc] block 0
DC:
	value = -10, magnitude = 4, index = 5
		bitstream => writing 14 over 4 bits
		bitstream => writing 5 over 4 bits

AC:
	value = 86, magnitude = 7, index = 86
	RLE code = 23, huffman path = 65416, nbits = 16
		bitstream => writing 65416 over 16 bits
		bitstream => writing 86 over 7 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 3, huffman path = 10, nbits = 4
		bitstream => writing 10 over 4 bits
		bitstream => writing 3 over 3 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 1, huffman path = 1, nbits = 2
		bitstream => writing 1 over 2 bits
		bitstream => writing 1 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 34, huffman path = 247, nbits = 8
		bitstream => writing 247 over 8 bits
		bitstream => writing 2 over 2 bits
	value = -31, magnitude = 5, index = 0
	RLE code = 21, huffman path = 2038, nbits = 11
		bitstream => writing 2038 over 11 bits
		bitstream => writing 0 over 5 bits
	value = 8, magnitude = 4, index = 8
	RLE code = 4, huffman path = 24, nbits = 5
		bitstream => writing 24 over 5 bits
		bitstream => writing 8 over 4 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 2, huffman path = 4, nbits = 3
		bitstream => writing 4 over 3 bits
		bitstream => writing 0 over 2 bits
	value = 13, magnitude = 4, index = 13
	RLE code = 68, huffman path = 65432, nbits = 16
		bitstream => writing 65432 over 16 bits
		bitstream => writing 13 over 4 bits
	value = 13, magnitude = 4, index = 13
	RLE code = 52, huffman path = 4087, nbits = 12
		bitstream => writing 4087 over 12 bits
		bitstream => writing 13 over 4 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 11, nbits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 11, nbits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 11, nbits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 1 bits
	value = 2, magnitude = 2, index = 2
	RLE code = 34, huffman path = 247, nbits = 8
		bitstream => writing 247 over 8 bits
		bitstream => writing 2 over 2 bits
	value = -2, magnitude = 2, index = 1
	RLE code = 18, huffman path = 57, nbits = 6
		bitstream => writing 57 over 6 bits
		bitstream => writing 1 over 2 bits
	value = -4, magnitude = 3, index = 3
	RLE code = 19, huffman path = 246, nbits = 8
		bitstream => writing 246 over 8 bits
		bitstream => writing 3 over 3 bits
	value = 3, magnitude = 2, index = 3
	RLE code = 98, huffman path = 2039, nbits = 11
		bitstream => writing 2039 over 11 bits
		bitstream => writing 3 over 2 bits
	value = -3, magnitude = 2, index = 0
	RLE code = 50, huffman path = 248, nbits = 8
		bitstream => writing 248 over 8 bits
		bitstream => writing 0 over 2 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 11, nbits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 11, nbits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 33, huffman path = 26, nbits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 0 over 1 bits
	value = 1, magnitude = 1, index = 1
	RLE code = 17, huffman path = 11, nbits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 1 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 49, huffman path = 27, nbits = 5
		bitstream => writing 27 over 5 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 33, huffman path = 26, nbits = 5
		bitstream => writing 26 over 5 bits
		bitstream => writing 0 over 1 bits
	value = -1, magnitude = 1, index = 0
	RLE code = 17, huffman path = 11, nbits = 4
		bitstream => writing 11 over 4 bits
		bitstream => writing 0 over 1 bits
	value = endofblock, huffman_path = 0, nbits = 2
		bitstream => writing 0 over 2 bits
